///
/// MIT License
/// Copyright (c) 2018-2019 Jongmin Yun
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
/// SOFTWARE.
///

#ifdef MATH_ENABLE_RTTR
#include <Math/Common/XRttrEntry.h>

// Include files that need to be reflected.
#include <Math/Type/Math/DVector2.h>
#include <Math/Type/Math/DVector3.h>
#include <Math/Type/Math/DVector4.h>
#include <Math/Type/Math/DMatrix2.h>
#include <Math/Type/Math/DMatrix3.h>
#include <Math/Type/Math/DMatrix4.h>

namespace dy::math
{

//!
//! DVector2 series
//!

__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TU8>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TU16>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TU32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TU64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TI8>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TI16>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TI32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TI64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector2<TF64>);

namespace detail
{

static void __InitDVector2()
{
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TU8>)
  {
    EXPR_REGISTER_TYPE(DVector2<TU8>)
      .EXPR_REGISTER_VARIABLE(DVector2<TU8>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TU8>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TU16>)
  {
    EXPR_REGISTER_TYPE(DVector2<TU16>)
      .EXPR_REGISTER_VARIABLE(DVector2<TU16>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TU16>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TU32>)
  {
    EXPR_REGISTER_TYPE(DVector2<TU32>)
      .EXPR_REGISTER_VARIABLE(DVector2<TU32>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TU32>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TU64>)
  {
    EXPR_REGISTER_TYPE(DVector2<TU64>)
      .EXPR_REGISTER_VARIABLE(DVector2<TU64>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TU64>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TI8>)
  {
    EXPR_REGISTER_TYPE(DVector2<TI8>)
      .EXPR_REGISTER_VARIABLE(DVector2<TI8>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TI8>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TI16>)
  {
    EXPR_REGISTER_TYPE(DVector2<TI16>)
      .EXPR_REGISTER_VARIABLE(DVector2<TI16>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TI16>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TI32>)
  {
    EXPR_REGISTER_TYPE(DVector2<TI32>)
      .EXPR_REGISTER_VARIABLE(DVector2<TI32>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TI32>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TI64>)
  {
    EXPR_REGISTER_TYPE(DVector2<TI64>)
      .EXPR_REGISTER_VARIABLE(DVector2<TI64>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TI64>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TF32>)
  {
    EXPR_REGISTER_TYPE(DVector2<TF32>)
      .EXPR_REGISTER_VARIABLE(DVector2<TF32>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TF32>, Y)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector2<TF64>)
  {
    EXPR_REGISTER_TYPE(DVector2<TF64>)
      .EXPR_REGISTER_VARIABLE(DVector2<TF64>, X)
      .EXPR_REGISTER_VARIABLE(DVector2<TF64>, Y)
  };
};

};

//!
//! DVector3 Series
//! 

__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TU8>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TU16>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TU32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TU64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TI8>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TI16>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TI32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TI64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector3<TF64>);

namespace detail
{

static void __InitDVector3()
{
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TU8>)
  {
    EXPR_REGISTER_TYPE(DVector3<TU8>)
      .EXPR_REGISTER_VARIABLE(DVector3<TU8>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TU8>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TU8>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TU16>)
  {
    EXPR_REGISTER_TYPE(DVector3<TU16>)
      .EXPR_REGISTER_VARIABLE(DVector3<TU16>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TU16>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TU16>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TU32>)
  {
    EXPR_REGISTER_TYPE(DVector3<TU32>)
      .EXPR_REGISTER_VARIABLE(DVector3<TU32>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TU32>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TU32>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TU64>)
  {
    EXPR_REGISTER_TYPE(DVector3<TU64>)
      .EXPR_REGISTER_VARIABLE(DVector3<TU64>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TU64>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TU64>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TI8>)
  {
    EXPR_REGISTER_TYPE(DVector3<TI8>)
      .EXPR_REGISTER_VARIABLE(DVector3<TI8>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TI8>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TI8>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TI16>)
  {
    EXPR_REGISTER_TYPE(DVector3<TI16>)
      .EXPR_REGISTER_VARIABLE(DVector3<TI16>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TI16>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TI16>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TI32>)
  {
    EXPR_REGISTER_TYPE(DVector3<TI32>)
      .EXPR_REGISTER_VARIABLE(DVector3<TI32>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TI32>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TI32>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TI64>)
  {
    EXPR_REGISTER_TYPE(DVector3<TI64>)
      .EXPR_REGISTER_VARIABLE(DVector3<TI64>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TI64>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TI64>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TF32>)
  {
    EXPR_REGISTER_TYPE(DVector3<TF32>)
      .EXPR_REGISTER_VARIABLE(DVector3<TF32>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TF32>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TF32>, Z)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector3<TF64>)
  {
    EXPR_REGISTER_TYPE(DVector3<TF64>)
      .EXPR_REGISTER_VARIABLE(DVector3<TF64>, X)
      .EXPR_REGISTER_VARIABLE(DVector3<TF64>, Y)
      .EXPR_REGISTER_VARIABLE(DVector3<TF64>, Z)
  };
}

};

//!
//! DVector4 Series
//!

__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TU8>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TU16>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TU32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TU64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TI8>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TI16>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TI32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TI64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DVector4<TF64>);

namespace detail
{

static void __InitDVector4()
{
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TU8>)
  {
    EXPR_REGISTER_TYPE(DVector4<TU8>)
      .EXPR_REGISTER_VARIABLE(DVector4<TU8>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TU8>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TU8>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TU8>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TU16>)
  {
    EXPR_REGISTER_TYPE(DVector4<TU16>)
      .EXPR_REGISTER_VARIABLE(DVector4<TU16>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TU16>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TU16>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TU16>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TU32>)
  {
    EXPR_REGISTER_TYPE(DVector4<TU32>)
      .EXPR_REGISTER_VARIABLE(DVector4<TU32>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TU32>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TU32>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TU32>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TU64>)
  {
    EXPR_REGISTER_TYPE(DVector4<TU64>)
      .EXPR_REGISTER_VARIABLE(DVector4<TU64>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TU64>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TU64>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TU64>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TI8>)
  {
    EXPR_REGISTER_TYPE(DVector4<TI8>)
      .EXPR_REGISTER_VARIABLE(DVector4<TI8>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TI8>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TI8>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TI8>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TI16>)
  {
    EXPR_REGISTER_TYPE(DVector4<TI16>)
      .EXPR_REGISTER_VARIABLE(DVector4<TI16>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TI16>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TI16>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TI16>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TI32>)
  {
    EXPR_REGISTER_TYPE(DVector4<TI32>)
      .EXPR_REGISTER_VARIABLE(DVector4<TI32>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TI32>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TI32>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TI32>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TI64>)
  {
    EXPR_REGISTER_TYPE(DVector4<TI64>)
      .EXPR_REGISTER_VARIABLE(DVector4<TI64>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TI64>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TI64>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TI64>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TF32>)
  {
    EXPR_REGISTER_TYPE(DVector4<TF32>)
      .EXPR_REGISTER_VARIABLE(DVector4<TF32>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TF32>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TF32>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TF32>, W)
  };
  __EXPR_REFLECTION_INSTANCE_START(DVector4<TF64>)
  {
    EXPR_REGISTER_TYPE(DVector4<TF64>)
      .EXPR_REGISTER_VARIABLE(DVector4<TF64>, X)
      .EXPR_REGISTER_VARIABLE(DVector4<TF64>, Y)
      .EXPR_REGISTER_VARIABLE(DVector4<TF64>, Z)
      .EXPR_REGISTER_VARIABLE(DVector4<TF64>, W)
  };
}

};

//!
//! Matrix2 Series
//!

__EXPR_REFLECTION_INSTANCE_INITIALIZE(DColumnMatrix2<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DColumnMatrix2<TF64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DRowMatrix2<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DRowMatrix2<TF64>);

namespace detail
{
  
static void __InitDMatrix2()
{
  __EXPR_REFLECTION_INSTANCE_START(DColumnMatrix2<TF32>)
  {
    EXPR_REGISTER_TYPE(DColumnMatrix2<TF32>)
      .EXPR_REGISTER_VARIABLE(DColumnMatrix2<TF32>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DColumnMatrix2<TF64>)
  {
    EXPR_REGISTER_TYPE(DColumnMatrix2<TF64>)
      .EXPR_REGISTER_VARIABLE(DColumnMatrix2<TF64>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DRowMatrix2<TF32>)
  {
    EXPR_REGISTER_TYPE(DRowMatrix2<TF32>)
      .EXPR_REGISTER_VARIABLE(DRowMatrix2<TF32>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DRowMatrix2<TF64>)
  {
    EXPR_REGISTER_TYPE(DRowMatrix2<TF64>)
      .EXPR_REGISTER_VARIABLE(DRowMatrix2<TF64>, __mValues)
  };
}

} /// ::detail namespace

//!
//! Matrix3 Series
//!

__EXPR_REFLECTION_INSTANCE_INITIALIZE(DColumnMatrix3<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DColumnMatrix3<TF64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DRowMatrix3<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DRowMatrix3<TF64>);

namespace detail
{
  
static void __InitDMatrix3()
{
  __EXPR_REFLECTION_INSTANCE_START(DColumnMatrix3<TF32>)
  {
    EXPR_REGISTER_TYPE(DColumnMatrix3<TF32>)
      .EXPR_REGISTER_VARIABLE(DColumnMatrix3<TF32>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DColumnMatrix3<TF64>)
  {
    EXPR_REGISTER_TYPE(DColumnMatrix3<TF64>)
      .EXPR_REGISTER_VARIABLE(DColumnMatrix3<TF64>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DRowMatrix3<TF32>)
  {
    EXPR_REGISTER_TYPE(DRowMatrix3<TF32>)
      .EXPR_REGISTER_VARIABLE(DRowMatrix3<TF32>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DRowMatrix3<TF64>)
  {
    EXPR_REGISTER_TYPE(DRowMatrix3<TF64>)
      .EXPR_REGISTER_VARIABLE(DRowMatrix3<TF64>, __mValues)
  };
}

} /// ::detail namespace

//!
//! Matrix4 Series
//!

__EXPR_REFLECTION_INSTANCE_INITIALIZE(DColumnMatrix4<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DColumnMatrix4<TF64>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DRowMatrix4<TF32>);
__EXPR_REFLECTION_INSTANCE_INITIALIZE(DRowMatrix4<TF64>);

namespace detail
{
  
static void __InitDMatrix4()
{
  __EXPR_REFLECTION_INSTANCE_START(DColumnMatrix4<TF32>)
  {
    EXPR_REGISTER_TYPE(DColumnMatrix4<TF32>)
      .EXPR_REGISTER_VARIABLE(DColumnMatrix4<TF32>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DColumnMatrix4<TF64>)
  {
    EXPR_REGISTER_TYPE(DColumnMatrix4<TF64>)
      .EXPR_REGISTER_VARIABLE(DColumnMatrix4<TF64>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DRowMatrix4<TF32>)
  {
    EXPR_REGISTER_TYPE(DRowMatrix4<TF32>)
      .EXPR_REGISTER_VARIABLE(DRowMatrix4<TF32>, __mValues)
  };
  __EXPR_REFLECTION_INSTANCE_START(DRowMatrix4<TF64>)
  {
    EXPR_REGISTER_TYPE(DRowMatrix4<TF64>)
      .EXPR_REGISTER_VARIABLE(DRowMatrix4<TF64>, __mValues)
  };
}

} /// ::detail namespace

void InitializeMathReflections()
{
  detail::__InitDVector2();
  detail::__InitDVector3();
  detail::__InitDVector4();
  detail::__InitDMatrix2();
  detail::__InitDMatrix3();
  detail::__InitDMatrix4();
}

} /// ::dy::math namespace
#endif
